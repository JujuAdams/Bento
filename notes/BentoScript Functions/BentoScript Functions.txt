This file contains brief documentation for BentoScript functions.



FileExecute(path)
  Executes the BentoScript stored at the target path. This function operates the same as the GML
  function BentoFileExecute().

Super()
  See below.

CallInherited()
  Executes the equivalent function for the current callback type by searching up the box behaviour
  tree. For example, the BentoSpriteButton template inherits behaviour from BentoButton. Calling
  CallInherited() for a BentoSpriteButton box will execute the callback code found in BentoButton.



BoxFind(identifier)
  Returns the box with the given identifier. If that box doesn't exist then an error will be
  thrown. This is the same as executing the GML function BentoBoxFind().

BoxFindRelaxed(identifier)
  Returns the box with the given identifier. If that box doesn't exist then the function will
  return <undefined>. This is the same as executing the GML function BentoBoxFindRelaxed().

BoxReplace(identifier, path)
  Replaces the box with the given identifier with the result of executing the file at the given
  path. This is the same as executing the .ReplaceFromFile() method for the target box.



LayerIsTop()
  Returns whether the current layer is at the very top of the layer stack.

LayerDelete(layerName)
  Deletes the layer with the given name.

LayerDeleteCurrent()
  Deletes the current layer.

LayerSustain(layerName)
  Keeps the volatile layer with the given name alive.  N.B. This function returns <true> if the
  layer exists or <false> if the layer does not exist. This return value is useful as it allows for
  layers used for e.g. tooltips to be created and sustained efficiently e.g.
  
    if (not LayerSustain("tooltip")) {
        build BentoLayer {
            precedence = BENTO_PRECEDENCE_PASSTHROUGH
            volatile = true
            name = "tooltip"
            FileExecute("tooltip.bento")
        }
    }



DebugLog(value, ...)
  Sends a message to GameMaker's debug output. The message is built by concatenating values passed
  to the function. This is similar to GameMaker's native show_debug_message().

DebugShowPointer(state)
  Sets whether the Bento native pointer position is visible. This function operates the same as the
  GML function BentoDebugShowPointer().

DebugShowSkeleton(state)
  Sets whether the wireframe for Bento boxes is visible. This function operates the same as the GML
  function BentoDebugShowSkeleton().

DebugRelaxedSprites(state)
  Sets whether Bento should allow strings instead of sprite references for sprite-related templates.
  This function operates the same as the GML function BentoDebugRelaxedSprites().

DebugBreakpoint()
  Calls BentoDebugBreakpoint(). Place a GameMaker debug breakpoint in this function to allow the
  GameMaker debugger to pause.



ForceClick(buttonName)
  Simulates a click using the given button name for the currently scoped box.

GetPointerX()
  Returns the worldspace x-coordinate of Bento's native pointer.

GetPointerY()
  Returns the worldspace y-coordinate of Bento's native pointer.

GetPointerStartX()
  Returns the worldspace x-coordinate of Bento's native pointer when a button was pressed.

GetPointerStartY()
  Returns the worldspace y-coordinate of Bento's native pointer when a button was pressed.