Bento uses a custom language called BentoScript to describe how your user interfaces should look.
BentoScript is not my invention however; BentoScript is a modified version of a language called
Catspeak. Catspeak is made by Katsaii and BentoScript (and Bento) wouldn't exist without it.
CAtspeak is incredible tool and it has been a pleasure to use. You can find out more about Catspeak
in general via the GitHub page (https://github.com/katsaii/catspeak-lang).

As mentioned above, BentoScript is modified to turn it from a general-purpose scripting language
into something tailored for UI definition. BentoScript (thanks to Catspeak) has a lot in common
GML so you should pick it up pretty quickly.

The first thing that is likely to trip you up is curly brackets (or "braces" as I think Americans
call them). Curly brackets MUST be on the same line as the branching statement. This means
BentoScript follows the "1TBS" bracket style (closely related to K&R).

Secondly, BentoScript does not have "for", "do...until", or "repeat" loops. BentoScript only has
"while" loops. Mercifully, BentoScript does have the "continue" and "break" commands so all is not
lost.

BentoScript has the same basic operators as GML. It is, however, missing ++ and -- and some of the
more obscure binary assignment operators, such as |= and &=. Arrays can be accessed using square
bracket notation and structs can be accessed with dot notation.

  N.B. Instead of throwing an error, reading a variable that doesn't exist on a struct will return
       <undefined>. Array literals and struct literals work as expected. String definition is also
       the same as GML.

BentoScript uses getter and setter functions for its variable access. THis has been done to
simplify BentoScript from the script-writing perspective. In particular, setting a variable may
trigger knock-on effects. You can read more about what variables are available the other doc files.
You can set up getter/setter functions yourself for custom Bento box templates via the
.VariableBind() method.

  N.B. When accessing and modifying Bento structs via GML you MUST ALWAYS use the .Get() and .Set()
       methods on that box/layer.

Creating a new Bento box in BentoScript is done using the "build" command. This command will create
an instance of the given template and add it as a child of the currently scoped box. Inside the
curly brackets, the scope of the BentoScript code will now swap to the newly created box.

You'll often want to be able to customise how your boxes respond to user input. In the most basic
example, buttons will recessarily want to trigger custom behaviour. This is a somewhat involved
topic which has its own special documentation file: "BentoScript Events".