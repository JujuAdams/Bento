Juju: This is a discussion regarding modals, UI elements that are used for important "unskippable"
      warnings or confirmation prompts. For a practical example, please see `oPageConfirmExitGame`.

Within the Gui system, modals are instances that:
 1) Have the behavior `GUI_BEHAVIOR_MODAL`
 2) Can be hovered by the cursor but only when using `GUI_NAV_MOUSE` and `GUI_NAV_TOUCH`
 3) Will block the cursor from hovering all instances that are below the modal

Modals are used to present a UI element that cannot be ignored. Any Gui instance that is handled
before the modal cannot be interacted with, meaning that input beneath the modal is entirely
blocked. Modals find use to show the player warnings ("A connection error has occurred") or to
confirm an action that may result in a loss of progress ("Are you sure you want to quit?"). In
games specifically, it is often required that you show a modal when a player's gamepad is
unexpectedly disconnected. You should in this case create a modal too.

Modals will very commonly be used as containers and as such are regularly parents. Please see the
"Parenting" note for more details.

Modal objects that you create should inherit from `GuiObject` (via intermediate objects as you
wish) and call `GuiSetBehavior(GUI_BEHAVIOR_MODAL)` in the Create event of the object, or
immediately after creating the instance. Modal objects will typically use two events:
 1) Create event
 2) User Event 0 - Gui update event `GUI_USER_EVENT_STEP`
 3) User Event 1 - Gui draw event `GUI_USER_EVENT_DRAW`
The Create event should be used to initialize variables that are relevant to the modal. This might
include variables that describe a sprite to draw, the color of the instance, or the alpha
transparency. The Create event functions as any other Create event in any other GameMaker instance.

User Event 0 is used by the Gui system to update the state of the modal. User Event 0, if it needs
to be executed, will be executed by `GuiStep()`. Please see `oMain` for more information on this
function. As previously mentioned, User Event 0 may not always be executed due to the internal
logic of the Gui system. For example, if the parent instance for the modal is set to invisible
(`visible = false;`) then it and all child instances will be skipped by `GuiStep()` and won't have
their User Event 0 executed. For modals, User Event 0 will usually be used for checking for button
input from `GuiInputButton()`. You will typically make use of User Event 0 for modals that can be
dismissed by the player when they press a "back" button or an "escape" button.

As with other Gui instances, there are two special variables that you can set: `width` and
`height`. All Gui instances are presumed to be rectangles for the purpose of positioning and mouse
detection. These `width` and `height` variables will set the size of the rectangle that defines
the instance within the Gui system. `x` and `y` are relevant for the Gui system too and these two
variables will always be treated as the center-middle of the Gui instance. It's often helpful to
know the left-right-top-bottom coordinates of a modal and this can be returned by calling
`GuiGetLeft()` etc.  There's no particular magic to these functions, they simply calculate
`x - width/2` and so on but it's handy to have that available as a shorthand function.

User Event 1 is executed similarly to User Event 0, but this time it is executed by `GuiDraw()`.
Again, please see `oMain` for more information on this function. You should do all drawing for a
modal in User Event 1. You may use any GameMaker drawing techniques - including matrices, shaders,
and surfaces - without limitation. However, the Gui system's scroll region feature uses the stencil
buffer and, as such, you may not use custom stencil buffer code.